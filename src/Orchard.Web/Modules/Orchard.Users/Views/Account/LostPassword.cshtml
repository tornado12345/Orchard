@model dynamic
@{
    var requirementsMessage = T.Plural("The password can't be empty", "Passwords are required to be a minimum of {0} characters in length", (int)ViewData["PasswordLength"]).Text;
    var additionalRequirementsMessage = new List<string>();
    if ((bool)ViewData["LowercaseRequirement"]) {
        additionalRequirementsMessage.Add(T("one lowercase letter").Text);
    }
    if ((bool)ViewData["UppercaseRequirement"]) {
        additionalRequirementsMessage.Add(T("one uppercase letter").Text);
    }
    if ((bool)ViewData["NumberRequirement"]) {
        additionalRequirementsMessage.Add(T("one number").Text);
    }
    if ((bool)ViewData["SpecialCharacterRequirement"]) {
        additionalRequirementsMessage.Add(T("one special character").Text);
    }
    if (additionalRequirementsMessage.Count() > 0) {
        requirementsMessage = T("{0} and must contain at least {1}", requirementsMessage, string.Join(", ", additionalRequirementsMessage)).Text;
    }
    requirementsMessage += ".";
}
<h1>@Html.TitleForPage(T("Change Password").ToString()) </h1>
<p>@T("Use the form below to change your password.")</p>
<p>@requirementsMessage</p>
@Html.ValidationSummary(T("Password change was unsuccessful. Please correct the errors and try again.").ToString())
@using (Html.BeginFormAntiForgeryPost()) {
    <fieldset>
        <legend>@T("Account Information")</legend>
        <div>
            <label for="newPassword">@T("New password:")</label>
            @Html.Password("newPassword")
            @Html.ValidationMessage("newPassword")
        </div>
        <div>
            <label for="confirmPassword">@T("Confirm new password:")</label>
            @Html.Password("confirmPassword")
            @Html.ValidationMessage("confirmPassword")
        </div>
        <div>
            <button class="primaryAction" type="submit">@T("Change Password")</button>
        </div>
    </fieldset>
} 